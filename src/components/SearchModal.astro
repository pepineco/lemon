---
import { Icon } from 'astro-icon/components'
---

<div class="search-modal-container">
	<div class="overlay"></div>

	<div class="search-modal">
		<div class="search-prompt">
			<Icon name="octicon:search-24" /><input type="text" placeholder="タイトルで検索する" />
		</div>
		<div class="search-result">
			<ul>
				<li class="selected">
					<a href="#">
						<div class="search-result-title"></div>
						<div class="search-result-description"></div>
					</a>
				</li>
			</ul>
		</div>
	</div>
</div>

<style lang="scss">
	div.search-modal-container {
		display: none;
	}

	div.overlay {
		z-index: 99;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.6);
	}

	div.search-modal {
		z-index: 100;
		position: fixed;
		top: 100px;
		left: 20%;
		width: 60%;
		border-radius: 12px;
		background-color: $bg_body;
		padding:2% 2%;
	}
	@media #{$sp} {
		div.search-modal {
			left: 3%;
			width: 94%;
			padding:6% 3%;
		}
	}

	div.search-prompt {
		padding:0 0 1.6%;
		display:flex;
		align-items:center;
		justify-content:space-between;
		@media #{$sp} {
			padding: 0 0 3%;
		}
		svg {
			width: 30px;
			height: 30px;
		}
		[astro-icon="octicon:search-24"] {
			color:#666;
		}
	}
	div.search-prompt input {
		width: 96%;
		border: 2px solid #666;
		border-radius:4px;
		padding: 0.4rem;
		background-color: $white;
		color: $textcolor_base;
		font-size: 1.2rem;
		line-height: 1.6rem;
		@media #{$sp}{
			width:88%;
		}
	}

	div.search-result {
		border-top: 1px dashed #ccc;
	}
	div.search-result ul {
		list-style: none;
		margin: 0.3rem;
		padding: 0;
	}
	div.search-result ul > :global(li) {
	}
	div.search-result ul > :global(li > a) {
		display: block;
		padding: 1.6% 2%;
		border-radius: 4px;
	}
	div.search-result ul > :global(li.selected > a) {
		background-color: rgba(241, 241, 239, 1);
		text-decoration:none;
	}

	div.search-result :global(div.search-result-title) {
		padding:0.5% 0;
		color:$textcolor_base;
		font-size:18px;
		font-weight:500;
	}
	div.search-result :global(div.search-result-description) {
		color:$textcolor_base;
		font-size:14px;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', async () => {
		let feedItems = []
		let fetched = false

		async function openModal() {
			document.querySelector('.search-modal-container').style.display = 'block'
			document.querySelector('.search-prompt input').focus()

			if (!fetched) {
				await fetchRSS()
			}
			searchAndRender()
		}

		function closeModal() {
			document.querySelector('.search-modal-container').style.display = 'none'
		}

		function handleKeydown(event) {
			if (event.keyCode === 13) {
				// Enter
				select()
			} else if (event.keyCode === 27) {
				// ESC
				closeModal()
			} else if (event.keyCode === 38) {
				// Up
				selectUp(event)
			} else if (event.keyCode === 40) {
				// Down
				selectDown(event)
			} else {
				searchAndRender()
			}
		}

		function select() {
			const a = document.querySelector('.search-result ul > li.selected a')
			a.click()
		}

		function selectFirst() {
			const li = document.querySelector('.search-result ul > li:first-child')
			if (li) {
				li.classList.add('selected')
			}
		}

		function selectUp(event) {
			event.preventDefault()

			const ul = document.querySelector('.search-result ul')
			const selected = ul.querySelector('.selected')
			if (selected) {
				selected.classList.remove('selected')

				if (selected.previousElementSibling) {
					selected.previousElementSibling.classList.add('selected')
				} else {
					ul.lastElementChild.classList.add('selected')
				}
			} else {
				ul.lastElementChild.classList.add('selected')
			}
		}

		function selectDown(event) {
			event.preventDefault()

			const ul = document.querySelector('.search-result ul')
			const selected = ul.querySelector('.selected')
			if (selected) {
				selected.classList.remove('selected')

				if (selected.nextElementSibling) {
					selected.nextElementSibling.classList.add('selected')
				} else {
					ul.firstElementChild.classList.add('selected')
				}
			} else {
				ul.firstElementChild.classList.add('selected')
			}
		}

		function handleMouseover(event) {
			Array.from(event.target.closest('ul').children).forEach((element) => {
				element.classList.remove('selected')
			})
			event.target.closest('li').classList.add('selected')
		}

		function searchAndRender() {
			const text = document.querySelector('.search-prompt input').value.trim()

			if (text !== '') {
				const results = search(text)
				renderResults(results)
			} else {
				renderResults(feedItems)
			}

			selectFirst()
		}

		function search(query) {
			const results = []
			feedItems.forEach((item) => {
				if (item.title.includes(query) || item?.description?.includes(query)) {
					results.push(item)
				}
			})
			return results
		}

		function renderResults(results) {
			const ul = document.querySelector('.search-result ul')
			ul.innerHTML = ''

			results.forEach((item) => {
				const li = document.createElement('li')
				const a = document.createElement('a')
				const title = document.createElement('div')
				const description = document.createElement('div')

				title.classList.add('search-result-title')
				title.textContent = item.title
				description.classList.add('search-result-description')
				description.textContent = item.description
				a.href = item.link

				li.addEventListener('mouseover', handleMouseover)

				a.appendChild(title)
				a.appendChild(description)
				li.appendChild(a)
				ul.appendChild(li)
			})
		}

		async function fetchRSS() {
			const url = new URL(location.href)
			const port = url.port ? `:${url.port}` : ''

			const res = await fetch(
				`${url.protocol}//${url.hostname}${port}/feed`
			)
			if (res.status !== 200) {
				console.log(res.status)
				throw new Error('Failed to fetch RSS feed')
			}

			const body = await res.text()

			const parser = new DOMParser()
			const xml = parser.parseFromString(body, 'text/xml')

			Array.from(xml.getElementsByTagName('item')).forEach((item) => {
				const title = item.getElementsByTagName('title')[0].textContent
				const link = item.getElementsByTagName('link')[0].textContent
				const description =
					item.getElementsByTagName('description')[0]?.textContent
				const pubDate = item.getElementsByTagName('pubDate')[0].textContent

				feedItems.push({
					title,
					link,
					description,
					pubDate,
				})
			})

			fetched = true
		}

		Array.from(document.getElementsByClassName('open-search-modal')).forEach(
			(element) => {
				element.addEventListener('click', openModal)
			}
		)
		document
			.getElementsByClassName('overlay')[0]
			.addEventListener('click', closeModal)
		document.addEventListener('keydown', handleKeydown)
	})
</script>
