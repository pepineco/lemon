---
import * as interfaces from '../../lib/interfaces.ts'
import {
	getPosts,
	getAllPosts,
	getRankedPosts,
	getPostBySlug,
	getPostsByTag,
	getBlock,
	getAllTags,
	getAllBlocksByBlockId,
	downloadFile,
} from '../../lib/notion/client.ts'
import {
	getPostLink,
	filePath,
	extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostFeaturedImage from '../../components/PostFeaturedImage.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import styles from '../../styles/blog.module.css'

export async function getStaticPaths() {
	const posts = await getAllPosts()
	return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
	throw new Error('Post not found. slug: ${slug}')
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
	await Promise.all([
		getAllBlocksByBlockId(post.PageId),
		getAllPosts(),
		getRankedPosts(),
		getPosts(5),
		getAllTags(),
		getPostsByTag(post.Tags[0]?.name, 3),
	])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
	.concat(extractTargetBlocks('file', blocks))
	.filter((block) => {
		if (!block) {
			return false
		}
		const imageOrFile = block.Image || block.File
		return imageOrFile && imageOrFile.File && imageOrFile.File.Url
	})

// Download files
await Promise.all(
	fileAtacchedBlocks
		.map(async (block) => {
			const expiryTime = (block.Image || block.File).File.ExpiryTime
			if (Date.parse(expiryTime) > Date.now()) {
				return Promise.resolve(block)
			}
			return getBlock(block.Id)
		})
		.map((promise) =>
			promise.then((block) => {
				let url!: URL
				try {
					url = new URL((block.Image || block.File).File.Url)
				} catch (err) {
					console.log('Invalid file URL')
					return Promise.reject()
				}
				return Promise.resolve(url)
			})
		)
		.map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
	ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}
---

<Layout
	title={post.Title}
	description={post.Excerpt}
	path={getPostLink(post.Slug)}
	ogImage={ogImage}
>
		<div slot="main" class={styles.main}>

			<div class="single">
				<div class={styles.post}>
					<article class="article">
						<div class="mainimg">
							<PostFeaturedImage post={post} />
						</div>
						<div class="entry">
							<PostTitle post={post} enableLink={false} />
							<div class="entry_meta">
								<PostDate post={post} />
								<PostTags post={post} />
							</div>
							<PostBody blocks={blocks} />
						</div>
					</article>

					<footer>
						<PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
					</footer>
				</div>
			</div>
		</div>

	<div slot="aside" class="aside">
		<BlogPostsLink heading="同じカテゴリーの投稿"
			posts={postsHavingSameTag.filter(
				(p: interfaces.Post) => p.Slug !== post.Slug
			)}
		/>
		<!--BlogPostsLink heading="Latest posts" posts={recentPosts} /-->
		<BlogTagsLink tags={tags} />
	</div>
</Layout>

<style lang="scss">
	.single{
		max-width:80%;
		margin:0 auto;
		@media #{$sp}{
			max-width:auto;
			max-width:initial;
		}
	}
	.article{
		background:$white;
		margin:6% 0 0;
		.entry{
			padding:3% 5%;
			.entry_meta{
				display:flex;
				border-top:1px dashed #ccc;
				padding: 2% 0;
				justify-content: space-between;

			}
		}
	}

</style>